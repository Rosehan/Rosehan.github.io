<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lilihx</title>
  <icon>https://www.gravatar.com/avatar/a4a54043ccf61d550ecae50bc9c1cd15</icon>
  <subtitle>夏虫语冰~小桥流水~杀你成仁</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-03-04T06:13:41.656Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Lilihx</name>
    <email>lihxsq@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Leetcode 之 dfs</title>
    <link href="http://example.com/2021/03/04/Leetcode-%E4%B9%8B-dfs/"/>
    <id>http://example.com/2021/03/04/Leetcode-%E4%B9%8B-dfs/</id>
    <published>2021-03-04T06:12:00.000Z</published>
    <updated>2021-03-04T06:13:41.656Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>Dfs : deep first search。深度优先搜索，主要用于数据结构中的树论或图论之中。与之对应的是：广度优先搜索。『寻路算法』的思想主要是：step forward，不行就go back。下面以LeetCode的题目作为举例。</p></blockquote><a id="more"></a><h2 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h2><p><a href="https://leetcode-cn.com/problems/ju-zhen-zhong-de-lu-jing-lcof/">题目链接：</a></p><p><img src="http://bj.bcebos.com/ibox-thumbnail98/d7bca9ac9f9a2491041c9f18e85c1bc7?authorization=bce-auth-v1%252Ffbe74140929444858491fbf2b6bc0935%252F2021-03-04T05%253A33%253A44Z%252F1800%252F%252Fe493675c50a019f209817c3923d911a5c835a23b6ef07415a2c91a57468f0a15" alt="截屏2021-03-04 下午1.33.38"></p><p>思路：这是一个典型的『寻路』题。下面直接给出代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">exist</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; board, <span class="built_in">string</span> word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rows = board.size();</span><br><span class="line">        <span class="keyword">int</span> cols = board[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cols; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(dfs(board, word, i, j, <span class="number">0</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; board, <span class="built_in">string</span> word, <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> rows = board.size();</span><br><span class="line">        <span class="keyword">int</span> cols = board[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= rows || i &lt; <span class="number">0</span> || j &gt;= cols || j &lt; <span class="number">0</span> || board[i][j] != word[k]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(k == word.size() - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        board[i][j] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="keyword">bool</span> res = dfs(board, word, i + <span class="number">1</span>, j, k + <span class="number">1</span>) || dfs(board, word, i - <span class="number">1</span>, j, k + <span class="number">1</span>) || </span><br><span class="line">                      dfs(board, word, i, j + <span class="number">1</span>, k + <span class="number">1</span>) || dfs(board, word, i , j - <span class="number">1</span>, k + <span class="number">1</span>);</span><br><span class="line">        board[i][j] = word[k];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>实现dfs的主要方式就是递归，这里判断的是字符串是否和某一路径匹配。我们用k作为已经匹配的长度。寻路算法需要注意的几点是：</p><ul><li>某次搜索的结束条件：通常为边界值 + 特定条件。本题中的特定条件是字符串不匹配。</li><li>状态记录：主要记录某节点的状态值：是否访问过 等。在访问某节点后，需要更新状态值。</li><li>回退：当当前节点的各方向都不可达时，需要将当前节点的状态回退。通常是 将已访问 改为 未访问。</li></ul><p>本题的思路中，巧妙的一点是：没有新开状态数组，而是在原字符串数组中，利用特殊字符来记录状态变化。</p><p>另：本题虽然这种方法通过，但是 时空间 表现却极差。<img src="http://bj.bcebos.com/ibox-thumbnail98/a433025c2f0efe2fac7171cbbedf0841?authorization=bce-auth-v1%252Ffbe74140929444858491fbf2b6bc0935%252F2021-03-04T05%253A49%253A45Z%252F1800%252F%252F1291d09016b74a73213d6ae12db083280e5d56cea4e717c93f6f3ccfabb82deb" alt="截屏2021-03-04 下午1.49.40"></p><p>** 分析 **</p><blockquote><p>上述方法对每个节点都进行了大量重复的遍历，我们的跳出判断拦截率不高。我们在做<strong>字符串模式匹配</strong>的时候，注意到其会利用到字符串本身的特性。</p></blockquote><blockquote><p>此外，我们没有利用子问题的解。我可以提供一种思想：比如我们从后往前遍历，记录后面每个节点可以匹配到的末尾字符串数量。比如子节点i,j 可以匹配最后w各字符，那我们往前探寻的时候就可以充分利用子问题的解，减少递归。</p></blockquote><h2 id="题目2："><a href="#题目2：" class="headerlink" title="题目2："></a>题目2：</h2><p><a href="https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/">题目链接</a></p><p><img src="http://bj.bcebos.com/ibox-thumbnail98/96f2291be8d98a60c35256f15449e3c4?authorization=bce-auth-v1%252Ffbe74140929444858491fbf2b6bc0935%252F2021-03-04T05%253A57%253A40Z%252F1800%252F%252F8cce66d9e7722871567fa9a5965d5d87e68df513c70c4f9d9db29dae7cc699dc" alt="截屏2021-03-04 下午1.57.35"></p><p><strong>分析</strong></p><p>该题目和第一题很类似。典型的dfs问题。需要注意的是：</p><ul><li>该dfs的跳出判断是：出界 + 当前节点已访问 + 当前节点不合法</li><li>状态记录：需要新开内存，记录每个节点状态</li><li>回退：该题的回退你可以理解为：路路可达。路路不可达时，回退当前节点。可达时不需要回退。</li></ul><p>** 代码 **</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cal_num</span> <span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(num &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">            res += (num%<span class="number">10</span>);</span><br><span class="line">            num /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res += num;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; &amp;table, <span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = table.size();</span><br><span class="line">        <span class="keyword">int</span> col = table[<span class="number">0</span>].size();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(width&lt;<span class="number">0</span> || width&gt;=row || height&lt;<span class="number">0</span> || height&gt;=col) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cal_num(width) + cal_num(height) &gt; k) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(table[width][height]) <span class="keyword">return</span>;</span><br><span class="line">        table[width][height] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        dfs(table, width<span class="number">-1</span>,height, k);</span><br><span class="line">        dfs(table, width+<span class="number">1</span>,height, k);</span><br><span class="line">        dfs(table, width,height<span class="number">-1</span>, k);</span><br><span class="line">        dfs(table, width,height+<span class="number">1</span>, k);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">movingCount</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; table(m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++) &#123;</span><br><span class="line">            table[i].resize(n);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">0</span>; j&lt;n; j++) &#123;</span><br><span class="line">                table[i][j] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(table, <span class="number">0</span>, <span class="number">0</span>, k);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">0</span>; j&lt;n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(table[i][j])</span><br><span class="line">                    res ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意：</p><blockquote><p>状态数组我用的是bool，bool只能表示两种状态：已访问 未访问。但是本题中还有第三种状态：行列超出范围导致的『节点无效』。关于这个节点无效的处理方式有两种：</p><ul><li>dfs之前：状态方程不用bool，增加第三种状态记录。</li><li>dfs之中：dfs的时候进行判断，状态方程已然用Bool, 只需两种</li></ul><p>前者bool转int，内存增大；后者判断的次数增大，如果单独写cal_num，调用栈 和 调用次数增加，时间和内存也可能增大。</p></blockquote><p>两种方法的时空间表现如下：</p><p><img src="http://bj.bcebos.com/ibox-thumbnail98/0bfbb5793a71a14d904fcd485acdc771?authorization=bce-auth-v1%252Ffbe74140929444858491fbf2b6bc0935%252F2021-03-04T06%253A03%253A53Z%252F1800%252F%252F66e7b475a646a9c8e1386ba05888f5f9109455d15e3fa9a8ac1b8090382fbbff" alt="截屏2021-03-04 下午2.03.48"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Dfs : deep first search。深度优先搜索，主要用于数据结构中的树论或图论之中。与之对应的是：广度优先搜索。『寻路算法』的思想主要是：step forward，不行就go back。下面以LeetCode的题目作为举例。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="Leetcode" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
    
    <category term="code" scheme="http://example.com/Tags/code/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/03/03/hello-world/"/>
    <id>http://example.com/2021/03/03/hello-world/</id>
    <published>2021-03-03T03:58:09.000Z</published>
    <updated>2021-03-03T03:58:29.178Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote></blockquote><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Luckyexcel搭建</title>
    <link href="http://example.com/2021/02/22/Luckyexcel/"/>
    <id>http://example.com/2021/02/22/Luckyexcel/</id>
    <published>2021-02-22T06:25:00.000Z</published>
    <updated>2021-03-03T03:54:52.852Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>需求：局域网下多人共享excel<br>Luckyexcel是国内开源的在线excel工具，可以嵌入到网站中，也可以单独部署来满足我们的需求。</p></blockquote><a id="more"></a><h2 id="1，依赖：node安装"><a href="#1，依赖：node安装" class="headerlink" title="1，依赖：node安装"></a>1，依赖：node安装</h2><p>Luckyexcel依赖于node。因此我们首先需要配置node。</p><p>windows下配置node链接：<a href="https://blog.csdn.net/zjh_746140129/article/details/80460965">点击跳转node安装教程</a></p><p>node安装里面有重要的几步：<br>1，下载node安装<br>2，配置环境变量<br>3，配置npm源</p><p>安装成功的验证方式：<br>windows打开cmd命令行，输入node -v，回车显示版本号</p><p>输入npm -v，回车显示版本号</p><h2 id="2，LuckyExcel安装"><a href="#2，LuckyExcel安装" class="headerlink" title="2，LuckyExcel安装"></a>2，LuckyExcel安装</h2><p>LuckySheet的官方地址：<a href="https://gitee.com/mengshukeji/Luckysheet">点击跳转</a></p><p>LuckyExcel的官方地址:<a href="https://gitee.com/mengshukeji/Luckyexcel#/mengshukeji/Luckyexcel/blob/master/src/index.html">点击跳转</a></p><p>LuckySheet是一个开源的基于node.js的在线表格编辑器，LuckyExcel在luckySheet的基础至上增加了xlsx文件的导入导出。</p><p>LuckyExcel的安装方式：<br/><br>1，使用cmd命令行，cd到某个文件夹，（路径自己定义，但<strong>尽量不要出现中文路径</strong>）</p><p>2，cmd命令行下执行命令</p><p><code>git clone https://gitee.com/mengshukeji/Luckyexcel.git </code></p><p>该命令会将源代码下载到当前路径，生成一个Luckyexcel开头的文件夹</p><p>3，cmd命令行下执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入到特定目录</span></span><br><span class="line">cd Luckyexcel</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> npm 下载, 需要时间等待</span></span><br><span class="line">npm install luckyexcel</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> npm下载，需要时间等待</span></span><br><span class="line">npm install -g gulp-cli</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> npm安装依赖，需要时间等待</span></span><br><span class="line">npm install</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4, 上述命令没有报错后，证明已经安装成功</p><p>运行 <strong>npm run dev</strong> 命令启动</p><p><img src="http://bj.bcebos.com/ibox-thumbnail98/b33071adb2562076cd47a46b0130a641?authorization=bce-auth-v1%252Ffbe74140929444858491fbf2b6bc0935%252F2021-02-22T06%253A46%253A19Z%252F1800%252F%252Ff8b10b7d0471819c0135f37fc2dd6e2ded46f60999d26e566d632efce94e0da4" alt="截屏2021-02-22 下午2.46.15"></p><p>启动后如上述截图，使用图中的倒数第三行的external链接，在浏览器中访问。</p><h2 id="3，共享"><a href="#3，共享" class="headerlink" title="3，共享"></a>3，共享</h2><p>上述操作在Server的3000端口启动了一个进程，如果Server的网络设置完好，同一局域网下的其余用户也可以正常访问。</p><p>如果网络未设置好，请尝试配置windows下的防火墙或者网络设置，打开3000端口供外部访问即可。</p><h2 id="4，重要说明"><a href="#4，重要说明" class="headerlink" title="4，重要说明"></a>4，重要说明</h2><p>1，上述启动之后，该Server的生命周期 就和 该cmd窗口的生命周期绑定在一起，cmd窗口不能关闭，否则会杀死进程。</p><p>2，该工具暂不支持打印。可以使用 导入 导出功能，将文件导出到本地，使用Excel打印。</p><p>3，该工具不支持新建文件，可以使用子表格的方式。</p><p>4，… … 其余不支持的功能，看是否能用导入导出 &amp; excel的方式解决。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;需求：局域网下多人共享excel&lt;br&gt;Luckyexcel是国内开源的在线excel工具，可以嵌入到网站中，也可以单独部署来满足我们的需求。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Luckysheet" scheme="http://example.com/categories/Luckysheet/"/>
    
    
    <category term="Tool" scheme="http://example.com/Tags/Tool/"/>
    
  </entry>
  
  <entry>
    <title>一</title>
    <link href="http://example.com/2021/02/20/%E4%B8%80/"/>
    <id>http://example.com/2021/02/20/%E4%B8%80/</id>
    <published>2021-02-20T11:11:00.000Z</published>
    <updated>2021-03-03T03:57:25.650Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>和h一起去看电影的那年夏天。网上铺天盖地地吹捧《药神》，我看完后忿忿不平。一是悲悯这部电影，已然望见雷池，却迈不过雷池；二是冷眼一群猪瞎叫唤。</p></blockquote><a id="more"></a><br/>![截屏2021-02-23 下午1.24.19](http://bj.bcebos.com/ibox-thumbnail98/efd8f882ccd6ea478686312db678163d?authorization=bce-auth-v1%252Ffbe74140929444858491fbf2b6bc0935%252F2021-02-23T05%253A24%253A22Z%252F1800%252F%252F021c72be7ac8a442a208bdaad9a7eb8d2f55272791f7f61269f53c9057cd2755)即便我一直提防自己，永远以山下人的眼光抬眼看这个世界，永远也别站在道德的制高点。可我还是会纠结，社会太复杂。我一方面感慨共产党领导下的共和国飞速发展，一方面深思发展所付出的代价；一方面对西方诋毁噬之以鼻，另一方面对国内群情激愤失望至极。<br/>前段时间，朋友劝我春节做直播，轻松百万粉。我玩笑着回应到：假如我有了百万粉，我就在直播间，对粉丝说：『你们知道吗，你们中的80%都是傻子』。<br/><br/>这其实就是我对这个社会过于偏激的评价，多数人是猪。一百多年来，变过吗？<br/>当然变过，我肯定百余年来中国思想的空前解放。但与改革开放来经济飞速发展相比，我对思想上的解放，极度失望。<br/><br/>在我的理念中，我称之为『代价』。<br/>经济发展的代价就是思想上的停滞。社会发展的节点，就是一次次抉择。我们选择了A，就相对延缓了B。<br/><br>我不得不庆幸的是：我们选择了经济，让我今天能吃饱了撑得，畅所欲言。<br/>假如历史重来，我一样支持选A，我甚至会偏激的杀B取A。在我的世界观里，我称之为『杀你成仁』<br/><br/>只是，即便如此。实事求是，优点是永远不能掩盖缺陷的。<br/><br/>我溯流而上，追寻答案的时候，总是提醒自己，从0开始，破往生绝学，试开万世太平。然而不过更加迷茫。<br/>真理在哪里？有真理吗？<br/>马克思主义带了了唯物辩证法，这是形成我现在思想的关键因素。<br/>如果中国的年轻一代，都学了马克思主义，我会将其放到54的空前高度。<br/>只是有的即便是共产党员，也未必有多高的觉悟。<br/><br/>我其实一直不相信自己，我从不认为我说的就是对的。<br/>我坚持我，因为我是我，不是我是对的。<br/><br/>回到开头，我以电影引入。只是为了反驳『脑残粉』。<br/>爱不是全盘肯定，我们永远要以辩证法理智地看问题，跳出来，千万不要陷进去。<br/>以一个旁观者地角度分析反面观点。<p>但我也没有百万粉丝啊？怎么偏激地对他们说：<br/><br>『你们知道吗，你们其中大多数都是猪』</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;和h一起去看电影的那年夏天。网上铺天盖地地吹捧《药神》，我看完后忿忿不平。一是悲悯这部电影，已然望见雷池，却迈不过雷池；二是冷眼一群猪瞎叫唤。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Heart" scheme="http://example.com/categories/Heart/"/>
    
    
    <category term="随笔" scheme="http://example.com/Tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Python数据库连接：Li_Db探索</title>
    <link href="http://example.com/2021/01/26/Python%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%EF%BC%9ALi-Db%E6%8E%A2%E7%B4%A2/"/>
    <id>http://example.com/2021/01/26/Python%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%EF%BC%9ALi-Db%E6%8E%A2%E7%B4%A2/</id>
    <published>2021-01-26T05:01:00.000Z</published>
    <updated>2021-03-03T03:56:45.382Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>在日常编写Python脚本的时候，总会遇到一种头疼的情况：拼接SQL。Pymysql，Mysql-connector等第三方数据库连接工具都只是提供了最简单的execute操作，增删改查语句都需要我们手拼SQL，这在日常开发中是极其不便的。</p></blockquote><blockquote><p>此外，成熟的Server开发语言如Java，PHP等，都会将数据库连接生成配置文件单独维护。因此基于上面两种痛点，自己在PymySQL上封装了一层，来解决这两个问题。</p></blockquote><a id="more"></a><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p>Li_Db的简单类图如下：</p><p><img src="http://bj.bcebos.com/ibox-thumbnail98/ae57f990546710071579eb8f5b05a5a6?authorization=bce-auth-v1%252Ffbe74140929444858491fbf2b6bc0935%252F2021-01-26T05%253A21%253A04Z%252F1800%252F%252F066b9c87f27dad8b5a19a5ef5f1580cc046e75275ff42a6954fcdb8dc6d39a12" alt="截屏2021-01-26 下午1.21.00"></p><p>一个上层调用者，不再需要导入PyMysql，只需要实例化一个Db_Mgr，然后配置响应的config_file即可。</p><p>一个Format_insert语句如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">format_insert</span>(<span class="params">table, row</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;DESC: 构造sql语句 </span></span><br><span class="line"><span class="string">    Arguments：</span></span><br><span class="line"><span class="string">    table：表名 </span></span><br><span class="line"><span class="string">    row  ：待插入数据，字典型 </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    sql = <span class="string">&quot;INSERT INTO %s ( &quot;</span> % table </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> row.keys():</span><br><span class="line">        sql += <span class="string">&quot;`%s`&quot;</span> % key </span><br><span class="line">        sql += <span class="string">&#x27;,&#x27;</span></span><br><span class="line">    <span class="comment"># 去除最后一个逗号</span></span><br><span class="line">    sql = sql[:-<span class="number">1</span>]</span><br><span class="line">    sql += <span class="string">&#x27;) VALUES (&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> row.values():</span><br><span class="line">        <span class="comment"># val 是int or float 不用加引号</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(val) == <span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">type</span>(val) == <span class="built_in">float</span>:</span><br><span class="line">            sql += <span class="built_in">str</span>(val)</span><br><span class="line">            sql += <span class="string">&#x27;,&#x27;</span></span><br><span class="line">            <span class="keyword">continue</span> </span><br><span class="line">        sql += (<span class="string">&quot;\&quot;%s\&quot;,&quot;</span> % val)</span><br><span class="line">    <span class="comment"># 去除最后一个,</span></span><br><span class="line">    sql = sql[:-<span class="number">1</span>]</span><br><span class="line">    sql += <span class="string">&#x27;)&#x27;</span>     </span><br><span class="line">    <span class="keyword">return</span> sql </span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>其余的format思想也都类似，调用者只需要传入key-value，Li_Db便可自动将其生成SQL，并执行。</p><p>Db_Mgr代码示例如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DBMgr</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;数据库管理类</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    db = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, clustername</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;构造函数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            clustername ([type]): [description]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.connect(clustername)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect</span>(<span class="params">self, clustername</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;读取cluster配置文件</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            clustername ([type]): [description]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 首先读取cluster配置文件</span></span><br><span class="line">        config_filename = <span class="string">&quot;db.ini&quot;</span></span><br><span class="line"></span><br><span class="line">        now_path = os.path.join(os.path.dirname(__file__))</span><br><span class="line">        config_file = os.path.join(now_path, config_filename)</span><br><span class="line">        cf = configparser.ConfigParser()</span><br><span class="line">        cf.read(config_file)</span><br><span class="line"></span><br><span class="line">        ip = cf.get(clustername, <span class="string">&quot;ip&quot;</span>)</span><br><span class="line">        username = cf.get(clustername, <span class="string">&quot;username&quot;</span>)</span><br><span class="line">        password = cf.get(clustername, <span class="string">&quot;password&quot;</span>)</span><br><span class="line">        db = cf.get(clustername, <span class="string">&quot;db&quot;</span>)</span><br><span class="line">        port = cf.getint(clustername, <span class="string">&quot;port&quot;</span>)</span><br><span class="line"></span><br><span class="line">        self.get_conmgr(ip, username, password, db, port)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_conmgr</span>(<span class="params">self, host, user, passwd, db=<span class="string">&#x27;&#x27;</span>, port=<span class="number">3306</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                charset=<span class="string">&#x27;utf8&#x27;</span>, log_name=<span class="literal">None</span>, log_file=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;连接数据库</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            host ([type]): [description]</span></span><br><span class="line"><span class="string">            user ([type]): [description]</span></span><br><span class="line"><span class="string">            passwd ([type]): [description]</span></span><br><span class="line"><span class="string">            db (str, optional): [description]. Defaults to &#x27;&#x27;.</span></span><br><span class="line"><span class="string">            port (int, optional): [description]. Defaults to 3306.</span></span><br><span class="line"><span class="string">            charset (str, optional): [description]. Defaults to &#x27;utf8&#x27;.</span></span><br><span class="line"><span class="string">            log_name ([type], optional): [description]. Defaults to None.</span></span><br><span class="line"><span class="string">            log_file ([type], optional): [description]. Defaults to None.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.conn = pymysql.connect(host=host, user=user, </span><br><span class="line">            passwd=passwd, port=port, read_timeout=<span class="number">30</span>, charset=charset)</span><br><span class="line">            self.cur = self.conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line">            <span class="keyword">if</span> self.is_db_exist(db):</span><br><span class="line">                self.cur.execute(<span class="string">&#x27;USE %s&#x27;</span> % db)</span><br><span class="line">                print(<span class="string">&#x27;select database success. db: %s&#x27;</span> % db)</span><br><span class="line">                self.db = db</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.select_db(db)</span><br><span class="line">            self.cur.execute(<span class="string">&#x27;SET NAMES %s&#x27;</span> % charset)</span><br><span class="line">        <span class="keyword">except</span> pymysql.Error <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">&#x27;Mysql Error: %s&#x27;</span> % (e))</span><br><span class="line">            self.cur = <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_db_exist</span>(<span class="params">self, db</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 数据库是否存在</span></span><br><span class="line"><span class="string">            Args:</span></span><br><span class="line"><span class="string">            db: 数据库名称</span></span><br><span class="line"><span class="string">        Return:</span></span><br><span class="line"><span class="string">            True: 存在</span></span><br><span class="line"><span class="string">            False: 不存在</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        table = <span class="string">&#x27;information_schema.SCHEMATA&#x27;</span></span><br><span class="line">        columns = <span class="string">&#x27;*&#x27;</span></span><br><span class="line">        param = <span class="string">&#x27;WHERE SCHEMA_NAME=\&#x27;%s\&#x27;&#x27;</span> % db</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            result = self.query(table, columns, param)</span><br><span class="line">            <span class="keyword">if</span> result:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">except</span> pymysql.Error <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">&#x27;Mysql Error: %s&#x27;</span> % (e))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span>(<span class="params">self, sql</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;直接执行SQL语句</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            sql ([type]): [description]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.cur.execute(sql)</span><br><span class="line">            self.conn.commit()</span><br><span class="line">            result = self.cur.fetchall()</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">except</span> pymysql.Error <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">&quot;Mysql Error: %s&quot;</span> % e)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">query</span>(<span class="params">self, table, columns, param</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;查询数据库</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            table: 表名</span></span><br><span class="line"><span class="string">            columns: 插入的列</span></span><br><span class="line"><span class="string">            param: 查询条件</span></span><br><span class="line"><span class="string">        Return:</span></span><br><span class="line"><span class="string">            Dict: 包含查询结果的字典</span></span><br><span class="line"><span class="string">            False: 查询失败</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        sql = <span class="string">&#x27;SELECT %s FROM %s %s&#x27;</span> % (columns, table, param)</span><br><span class="line">        print(<span class="string">&#x27;sql: %s&#x27;</span> % sql)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            start_time = time.time()</span><br><span class="line">            self.cur.execute(sql)</span><br><span class="line">            end_time = time.time()</span><br><span class="line">            print(<span class="string">&#x27;execute sql cost: %f&#x27;</span> % (end_time - start_time))</span><br><span class="line">            start_time = time.time()</span><br><span class="line">            result = self.cur.fetchall()</span><br><span class="line">            end_time = time.time()</span><br><span class="line">            print(<span class="string">&#x27;fetch result cost: %f&#x27;</span> % (end_time - start_time))</span><br><span class="line">            resultdict = []</span><br><span class="line">            start_time = time.time()</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> result:</span><br><span class="line">                resultdict.append(item)</span><br><span class="line">            end_time = time.time()</span><br><span class="line">            print(<span class="string">&#x27;append result cost: %f&#x27;</span> % (end_time - start_time))</span><br><span class="line">            <span class="keyword">return</span> resultdict</span><br><span class="line">        <span class="keyword">except</span> pymysql.Error <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">&#x27;Mysql Error: %s&#x27;</span> % e)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>而Db_Mgr可以封装自定义你想要的一切SQL操作，比如getById, multiInsert等等。这样就能在多个Python脚本之中复用了。</p><h2 id="2，可优化"><a href="#2，可优化" class="headerlink" title="2，可优化"></a>2，可优化</h2><p>Format_SQL只支持最简单的 fileds 和 where语句，更复杂的条件查询，聚合函数等等复杂的SQL，需要优化FormatSQL。我见过一个PHP版本的类似操作，整个文件达到了大几百行，因此实现起来还是很复杂的。</p><p>希望以后能逐步完善。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在日常编写Python脚本的时候，总会遇到一种头疼的情况：拼接SQL。Pymysql，Mysql-connector等第三方数据库连接工具都只是提供了最简单的execute操作，增删改查语句都需要我们手拼SQL，这在日常开发中是极其不便的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;此外，成熟的Server开发语言如Java，PHP等，都会将数据库连接生成配置文件单独维护。因此基于上面两种痛点，自己在PymySQL上封装了一层，来解决这两个问题。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Python" scheme="http://example.com/Tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>First &amp; Why</title>
    <link href="http://example.com/2021/01/19/First-Why/"/>
    <id>http://example.com/2021/01/19/First-Why/</id>
    <published>2021-01-19T02:01:00.000Z</published>
    <updated>2021-03-03T03:55:52.772Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>时隔多年，他又拿出了尘封已久的lilihx.com，竟然有了些悔意。</p></blockquote><a id="more"></a><p>大概去年，某云一直发邮件通知他的WordPress不合规范，正直当时busy for studying，无暇他顾；再者，time to say bye to my school life。他的学生优惠嘎然而止。便放弃他的博客网站，甚至连备份都没有。</p><p>然工作之后，一个域名于他而言已经不算什么，再者lilihx毕竟和他真名相关，万一以后值钱了呢？抱着买股票的心态，于deadline之前鬼使神差的续费了。</p><p>诚然，他不知道我有多大的耐心去坚持更新我的博客，虽然他一直都有很多想要诉说的。Code OR Program，Sport OR Pop Star，或者简单聊聊自己，聊聊what I want to say to the world. </p><p>我只希望，在俗世浮华之中，能找一个心灵的净土。从容地面对这个世界。</p><p>为天地立心，为生命立命，为往圣继绝学，为万世开太平。</p><p>2020.1.19 22:03</p><p>2021.1.19<br>今早遇雪<br>心头涌出一句：『待到此花飞尽』<br>不恨此花飞尽，恨西园落红难缀，晓雨来过，遗踪何在，一池碎萍。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;时隔多年，他又拿出了尘封已久的lilihx.com，竟然有了些悔意。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="随笔" scheme="http://example.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="随笔" scheme="http://example.com/Tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="First" scheme="http://example.com/Tags/First/"/>
    
  </entry>
  
</feed>
